name: Build docker and push image to Docker Hub

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      SERVICE_LOCATION:
        required: true
        type: string
      BUILD_ARTIFACT:
        required: false
        type: string
        default: false
      NPM_BUILD:
        required: false
        type: boolean
        default: false
      ONLY_DOCKER:
        required: false
        type: boolean
        default: false
      BASE_IMAGE_BUILD:
        required: false
        type: boolean
        default: false

    secrets:
      RELEASE_DOCKER_HUB:
        required: true
      ACTOR_DOCKER_HUB:
        required: true
      DEV_NAMESPACE_DOCKER_HUB:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      SLACK_OAUTH_TOKEN:
        required: true
      SLACK_MAPPING:
        required: true

jobs:
  build-dockers:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets.DEV_NAMESPACE_DOCKER_HUB }}
      SERVICE_LOCATION: ${{ inputs.SERVICE_LOCATION }}
      SERVICE_NAME: ${{ inputs.SERVICE_NAME }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        if: ${{ ( inputs.BUILD_ARTIFACT != 'false' ) }}
        with:
          name: ${{ inputs.BUILD_ARTIFACT }}
          path: ./

      - name: Setup branch and env
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
          echo "${{ toJSON(inputs) }}"

      - name: Get version info from pom
        if: ${{ contains(inputs.NPM_BUILD, 'false') && ( inputs.BUILD_ARTIFACT != 'false' )  && ( inputs.ONLY_DOCKER == false ) }}
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.1.1
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml
          xpath: /*[local-name()="project"]/*[local-name()="version"]

      - name: Unzip and extract for docker build
        if: ${{ contains(inputs.NPM_BUILD, 'false' ) && ( inputs.BUILD_ARTIFACT != 'false' )  && ( inputs.ONLY_DOCKER == true )}}
        run: |
          unzip "${{ inputs.BUILD_ARTIFACT }}.zip" -d "${{ inputs.SERVICE_LOCATION }}"

      - name: Unzip and extract for maven
        if: ${{ contains(inputs.NPM_BUILD, 'false' ) && ( inputs.BUILD_ARTIFACT != 'false' ) && ( inputs.ONLY_DOCKER == false ) }}
        run: |
          unzip -uj "${{ inputs.BUILD_ARTIFACT }}.zip" "${{ inputs.SERVICE_LOCATION }}/target/*" -d "${{ env.SERVICE_LOCATION }}/target/"

      - name: Unzip and extract for npm
        if: ${{ contains(inputs.NPM_BUILD, 'true' ) && ( inputs.BUILD_ARTIFACT != false )  && ( inputs.ONLY_DOCKER == false )}}
        run: |
          unzip "${{ inputs.BUILD_ARTIFACT }}.zip" "dist/*" -d "${{ inputs.SERVICE_LOCATION }}"

      - name: Get current date
        run: echo "BUILD_TIME=$(date +'%Y-%m-%d-%H-%M-%S')"  >> $GITHUB_ENV

      - name: Check Dockerfile for 'mosip' user definition
        run: |
          cd ${{ inputs.SERVICE_LOCATION }}
          DOCKERFILES=$(git ls-files | grep -w "Dockerfile")

          chk_layer=(
            "ARG\s+container_user=mosip"
            "ARG\s+container_user_group=mosip"
            "ARG\s+container_user_uid=1001"
            "ARG\s+container_user_gid=1001"
            "ENV\s+container_user=${container_user}
            "ENV\s+container_user_group=\\\${container_user_group}
            "ENV\s+container_user_uid=\\\${container_user_uid}
            "ENV\s+container_user_gid=\\\${container_user_gid}
            "WORKDIR\s+/home/\\\${container_user}"
            "chown\s+-R\s+\\\${container_user}:\\\${container_user}\s+/home/\\\${container_user}"
            "USER\s+\\\${container_user_uid}:\\\${container_user_gid}"
          )

          for FILE in $DOCKERFILES; do
            for layer in "${chk_layer[@]}"; do
              layer_count=$(grep -Ev '^$' "$FILE" | grep -Ec "$layer" || true)
          
              if [[ $layer_count -ne 1 ]]; then
                dlayer=$(echo $layer | sed -E 's/\\s\+/ /g' | sed -E 's/\\//g')
                echo "Docker layer: \"$dlayer\" not found in $FILE; EXITING"
                exit 1
              fi
            done
          done
        if: ${{ inputs.BASE_IMAGE_BUILD == false }}

      - name: Build check for Docker datetime & git commit labels
        run: |
          cd ${{ inputs.SERVICE_LOCATION }}
           chk_layer=( "ARG\\s+SOURCE"
                       "ARG\\s+COMMIT_HASH"
                       "ARG\\s+COMMIT_ID"
                       "ARG\\s+BUILD_TIME"
                       "LABEL\\s+source=\\\${SOURCE}"
                       "LABEL\\s+commit_hash=\\\${COMMIT_HASH}"
                       "LABEL\\s+commit_id=\\\${COMMIT_ID}" 
                       "LABEL\\s+build_time=\\\${BUILD_TIME}"
          )
          
          for layer in "${chk_layer[@]}"; do
            layer_count=$( grep -Ev '^$' Dockerfile | grep -Ec "$layer" || true);
          
            if [[ $layer_count -ne 1 ]]; then
              dlayer=$( echo $layer | sed -E 's/\\s\+/ /g' | sed -E 's/\\//g' )
              echo "Docker layer : \"$dlayer\" not found; EXITING";
              exit 1;
            fi
          done
        if: ${{ inputs.BASE_IMAGE_BUILD == false }}

      - name: Build image
        run: |
          if [[ ${{ inputs.BASE_IMAGE_BUILD }} == false ]]; then
            DOCKER_LABEL=$( echo "--build-arg COMMIT_HASH=$(git rev-parse HEAD) --build-arg COMMIT_ID=$(git rev-parse --short HEAD) --build-arg BUILD_TIME=$BUILD_TIME" )
          fi
          echo "DOCKER_LABEL = $DOCKER_LABEL "
          cd ${{ inputs.SERVICE_LOCATION }}
          docker build . --build-arg SOURCE=mosip --file Dockerfile $DOCKER_LABEL --tag ${{ env.SERVICE_NAME }}

      - name: Log into registry
        if: "${{ github.event_name != 'pull_request' }}"
        run: echo "${{secrets.RELEASE_DOCKER_HUB}}" | docker login -u ${{secrets.ACTOR_DOCKER_HUB}} --password-stdin

      - name: Push image
        if: "${{ github.event_name != 'pull_request' }}"
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          if [[ $BRANCH_NAME == master ]]; then
          VERSION=latest
          else
          VERSION=$BRANCH_NAME
          fi
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      # - name: Run Slack notification script
      #   if: ${{ always() }}
      #   run: |
      #     pwd
      #     chmod +x test.sh
      #     ./test.sh "$PR_AUTHOR" "$REPO" "$COMMIT" "$MESSAGE" "$STATUS" "$WORKFLOW" "$JOB_NAME" "$SLACK_MAPPING" "$SLACK_OAUTH_TOKEN"
      #   env:
      #     PR_AUTHOR: ${{ github.event.pull_request.user.login }}
      #     REPO: ${{ github.repository }}
      #     COMMIT: ${{ github.sha }}
      #     MESSAGE: ${{ github.event.head_commit.message }}
      #     STATUS: ${{ job.status }}
      #     WORKFLOW: ${{ github.workflow }}
      #     JOB_NAME: ${{ github.job }}
      #     SLACK_MAPPING: ${{ secrets.SLACK_MAPPING }}  # Secret for Slack mapping

      # Step to process Slack notification logic
      - name: Send Slack Notification
        if: ${{ always() }}
        env:
          SLACK_MAPPING: ${{ secrets.SLACK_MAPPING }}
          SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_TOKEN }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          REPO: ${{ github.repository }}
          COMMIT: ${{ github.sha }}
          MESSAGE: ${{ github.event.head_commit.message }}
          STATUS: ${{ job.status }}
          WORKFLOW: ${{ github.workflow }}
          JOB_NAME: ${{ matrix.SERVICE_NAME }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          echo "Start Slack notification debug..."
          echo "PR Author: $PR_AUTHOR"
          echo "Repository: $REPO"
          echo "Commit SHA: $COMMIT"
          echo "Commit Message: $MESSAGE"
          echo "Build Status: $STATUS"
          echo "Workflow: $WORKFLOW"
          echo "Job Name: $JOB_NAME"
          echo "Slack Mapping: $SLACK_MAPPING"

          # Get the Slack user ID from the mapping using jq
          SLACK_AUTHOR=$(echo "$SLACK_MAPPING" | jq -r --arg pr_author "$PR_AUTHOR" '.[$pr_author]')
          echo "Slack user mapped to PR Author: $SLACK_AUTHOR"

          # Get the Slack user ID from the mapping
          SLACK_AUTHOR=$(echo "$SLACK_MAPPING" | jq -r --arg pr_author "$PR_AUTHOR" '.[$pr_author]')
          echo "Slack user mapped to PR Author: $SLACK_AUTHOR"


          if [[ -z "$SLACK_AUTHOR" || "$SLACK_AUTHOR" == "null" ]]; then
            echo "Slack mapping not found for $PR_AUTHOR; exiting"
            exit 1
          fi

          # Create the message
          slack_message="Build Status: *$STATUS*
          Repository: *$REPO*
          Commit: *$COMMIT*
          Message: *$MESSAGE*
          Author: *$PR_AUTHOR*
          Workflow: *$WORKFLOW*
          Job: *$JOB_NAME*"

          # Send the message to Slack
          echo "Sending Slack notification to: @$SLACK_AUTHOR"
          curl -X POST -H "Authorization: Bearer $SLACK_OAUTH_TOKEN" \
          -H 'Content-type: application/json' \
          --data "{
            \"channel\": \"@$SLACK_AUTHOR\",
            \"text\": \"$slack_message\"
          }" https://slack.com/api/chat.postMessage

          echo "Slack notification sent successfully!"

